// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/consensus/consensus.proto

package consensus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Phase 1: Promise
type PromiseRequest struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromiseRequest) Reset()         { *m = PromiseRequest{} }
func (m *PromiseRequest) String() string { return proto.CompactTextString(m) }
func (*PromiseRequest) ProtoMessage()    {}
func (*PromiseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_consensus_30bfb362b0701dc3, []int{0}
}
func (m *PromiseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PromiseRequest.Unmarshal(m, b)
}
func (m *PromiseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PromiseRequest.Marshal(b, m, deterministic)
}
func (dst *PromiseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromiseRequest.Merge(dst, src)
}
func (m *PromiseRequest) XXX_Size() int {
	return xxx_messageInfo_PromiseRequest.Size(m)
}
func (m *PromiseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PromiseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PromiseRequest proto.InternalMessageInfo

func (m *PromiseRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type PromiseResponse struct {
	Promised bool `protobuf:"varint,1,opt,name=Promised,proto3" json:"Promised,omitempty"`
	// ID of previuosly accepted commit
	ID uint64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	// Holder of the lock, according to previously accepted commit
	Holder               string   `protobuf:"bytes,3,opt,name=Holder,proto3" json:"Holder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromiseResponse) Reset()         { *m = PromiseResponse{} }
func (m *PromiseResponse) String() string { return proto.CompactTextString(m) }
func (*PromiseResponse) ProtoMessage()    {}
func (*PromiseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_consensus_30bfb362b0701dc3, []int{1}
}
func (m *PromiseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PromiseResponse.Unmarshal(m, b)
}
func (m *PromiseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PromiseResponse.Marshal(b, m, deterministic)
}
func (dst *PromiseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromiseResponse.Merge(dst, src)
}
func (m *PromiseResponse) XXX_Size() int {
	return xxx_messageInfo_PromiseResponse.Size(m)
}
func (m *PromiseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PromiseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PromiseResponse proto.InternalMessageInfo

func (m *PromiseResponse) GetPromised() bool {
	if m != nil {
		return m.Promised
	}
	return false
}

func (m *PromiseResponse) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PromiseResponse) GetHolder() string {
	if m != nil {
		return m.Holder
	}
	return ""
}

// Phase 2: Commit
type CommitRequest struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Holder               string   `protobuf:"bytes,2,opt,name=Holder,proto3" json:"Holder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_consensus_30bfb362b0701dc3, []int{2}
}
func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (dst *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(dst, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CommitRequest) GetHolder() string {
	if m != nil {
		return m.Holder
	}
	return ""
}

type CommitResponse struct {
	Committed            bool     `protobuf:"varint,1,opt,name=Committed,proto3" json:"Committed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_consensus_30bfb362b0701dc3, []int{3}
}
func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (dst *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(dst, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

func (m *CommitResponse) GetCommitted() bool {
	if m != nil {
		return m.Committed
	}
	return false
}

func init() {
	proto.RegisterType((*PromiseRequest)(nil), "PromiseRequest")
	proto.RegisterType((*PromiseResponse)(nil), "PromiseResponse")
	proto.RegisterType((*CommitRequest)(nil), "CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "CommitResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsensusClient interface {
	Promise(ctx context.Context, in *PromiseRequest, opts ...grpc.CallOption) (*PromiseResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
}

type consensusClient struct {
	cc *grpc.ClientConn
}

func NewConsensusClient(cc *grpc.ClientConn) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) Promise(ctx context.Context, in *PromiseRequest, opts ...grpc.CallOption) (*PromiseResponse, error) {
	out := new(PromiseResponse)
	err := c.cc.Invoke(ctx, "/Consensus/Promise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/Consensus/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServer is the server API for Consensus service.
type ConsensusServer interface {
	Promise(context.Context, *PromiseRequest) (*PromiseResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_Promise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).Promise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consensus/Promise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).Promise(ctx, req.(*PromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consensus/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Promise",
			Handler:    _Consensus_Promise_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Consensus_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/consensus/consensus.proto",
}

func init() {
	proto.RegisterFile("proto/consensus/consensus.proto", fileDescriptor_consensus_30bfb362b0701dc3)
}

var fileDescriptor_consensus_30bfb362b0701dc3 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0xcf, 0x2b, 0x4e, 0xcd, 0x2b, 0x2e, 0x2d, 0x46, 0xb0, 0xf4, 0xc0, 0x32,
	0x4a, 0x0a, 0x5c, 0x7c, 0x01, 0x45, 0xf9, 0xb9, 0x99, 0xc5, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x4c,
	0x9e, 0x2e, 0x4a, 0xa1, 0x5c, 0xfc, 0x70, 0x15, 0xc5, 0x05, 0x20, 0xed, 0x42, 0x52, 0x5c, 0x1c,
	0x50, 0xa1, 0x14, 0xb0, 0x42, 0x8e, 0x20, 0x38, 0x1f, 0xaa, 0x9d, 0x09, 0xa6, 0x5d, 0x48, 0x8c,
	0x8b, 0xcd, 0x23, 0x3f, 0x27, 0x25, 0xb5, 0x48, 0x82, 0x59, 0x81, 0x51, 0x83, 0x33, 0x08, 0xca,
	0x53, 0x32, 0xe7, 0xe2, 0x75, 0xce, 0xcf, 0xcd, 0xcd, 0x2c, 0xc1, 0x61, 0x2f, 0x92, 0x46, 0x26,
	0x14, 0x8d, 0x7a, 0x5c, 0x7c, 0x30, 0x8d, 0x50, 0xe7, 0xc8, 0x70, 0x71, 0x42, 0x44, 0x4a, 0xe0,
	0xee, 0x41, 0x08, 0x18, 0xa5, 0x80, 0x64, 0xa1, 0x9e, 0x16, 0xd2, 0xe1, 0x62, 0x87, 0xba, 0x54,
	0x88, 0x5f, 0x0f, 0xd5, 0xe3, 0x52, 0x02, 0x7a, 0xe8, 0xfe, 0xd4, 0xe4, 0x62, 0x83, 0x98, 0x23,
	0xc4, 0xa7, 0x87, 0xe2, 0x58, 0x29, 0x7e, 0x3d, 0x54, 0x37, 0x24, 0xb1, 0x81, 0x83, 0xd3, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x24, 0x9b, 0x21, 0xc4, 0x71, 0x01, 0x00, 0x00,
}
